{"ast":null,"code":"import React, { useState } from 'react';\nexport function useKey(key) {\n  // Keep track of key state\n  const [pressed, setPressed] = useState(false); // Does an event match the key we're watching?\n\n  const match = event => key.toLowerCase() == event.key.toLowerCase(); // Event handlers\n\n\n  const onDown = event => {\n    if (match(event)) setPressed(true);\n  };\n\n  const onUp = event => {\n    if (match(event)) setPressed(false);\n  }; // Bind and unbind events\n\n\n  useEffect = () => {\n    window.addEventListener(\"keydown\", onDown);\n    window.addEventListener(\"keyup\", onUp);\n    return () => {\n      window.removeEventListener(\"keydown\", onDown);\n      window.removeEventListener(\"keyup\", onUp);\n    };\n  };\n\n  return pressed;\n}\nexport default useKey;","map":{"version":3,"sources":["C:/Users/Shamal123/desktop/elyah/elyah/src/components/functions/functions.js"],"names":["React","useState","useKey","key","pressed","setPressed","match","event","toLowerCase","onDown","onUp","useEffect","window","addEventListener","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACxB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC,CAFwB,CAIxB;;AACA,QAAMK,KAAK,GAAGC,KAAK,IAAIJ,GAAG,CAACK,WAAJ,MAAqBD,KAAK,CAACJ,GAAN,CAAUK,WAAV,EAA5C,CALwB,CAOxB;;;AACA,QAAMC,MAAM,GAAGF,KAAK,IAAI;AACpB,QAAID,KAAK,CAACC,KAAD,CAAT,EAAkBF,UAAU,CAAC,IAAD,CAAV;AACrB,GAFD;;AAIA,QAAMK,IAAI,GAAGH,KAAK,IAAI;AAClB,QAAID,KAAK,CAACC,KAAD,CAAT,EAAkBF,UAAU,CAAC,KAAD,CAAV;AACrB,GAFD,CAZwB,CAgBxB;;;AACAM,EAAAA,SAAS,GAAG,MAAM;AACdC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,MAAnC;AACAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCH,IAAjC;AACA,WAAO,MAAM;AACTE,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,MAAtC;AACAG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCJ,IAApC;AACH,KAHD;AAIH,GAPD;;AASA,SAAON,OAAP;AACH;AAEC,eAAeF,MAAf","sourcesContent":["import React, {useState} from 'react';\r\n\r\nexport function useKey(key) {\r\n    // Keep track of key state\r\n    const [pressed, setPressed] = useState(false)\r\n\r\n    // Does an event match the key we're watching?\r\n    const match = event => key.toLowerCase() == event.key.toLowerCase()\r\n\r\n    // Event handlers\r\n    const onDown = event => {\r\n        if (match(event)) setPressed(true)\r\n    }\r\n\r\n    const onUp = event => {\r\n        if (match(event)) setPressed(false)\r\n    }\r\n\r\n    // Bind and unbind events\r\n    useEffect = () => {\r\n        window.addEventListener(\"keydown\", onDown)\r\n        window.addEventListener(\"keyup\", onUp)\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", onDown)\r\n            window.removeEventListener(\"keyup\", onUp)\r\n        }\r\n    }\r\n\r\n    return pressed\r\n}\r\n\r\n  export default useKey;\r\n"]},"metadata":{},"sourceType":"module"}