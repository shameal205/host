{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nexport function useKey(key) {\n  // Keep track of key state\n  const [pressed, setPressed] = useState(false); // Does an event match the key we're watching?\n\n  const match = event => key.toLowerCase() == event.key.toLowerCase(); // Event handlers\n\n\n  const onDown = event => {\n    if (match(event)) setPressed(true);\n  }; // const onUp = event => {\n  //     if (match(event)) setPressed(false)\n  // }\n  // Bind and unbind events\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", onDown); //window.addEventListener(\"keyup\", onUp)\n\n    return () => {\n      window.removeEventListener(\"keydown\", onDown); //window.removeEventListener(\"keyup\", onUp)\n    };\n  }, [key]);\n  return pressed;\n}\nexport default useKey;","map":{"version":3,"sources":["C:/Users/Shamal123/desktop/elyah/elyah/src/components/functions/keyEvents.js"],"names":["React","useState","useEffect","useKey","key","pressed","setPressed","match","event","toLowerCase","onDown","window","addEventListener","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACxB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC,CAFwB,CAIxB;;AACA,QAAMM,KAAK,GAAGC,KAAK,IAAIJ,GAAG,CAACK,WAAJ,MAAqBD,KAAK,CAACJ,GAAN,CAAUK,WAAV,EAA5C,CALwB,CAOxB;;;AACA,QAAMC,MAAM,GAAGF,KAAK,IAAI;AACpB,QAAID,KAAK,CAACC,KAAD,CAAT,EAAkBF,UAAU,CAAC,IAAD,CAAV;AACrB,GAFD,CARwB,CAYxB;AACA;AACA;AAEA;;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCF,MAAnC,EADY,CAEZ;;AACA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCH,MAAtC,EADS,CAET;AACH,KAHD;AAIH,GAPQ,EAON,CAACN,GAAD,CAPM,CAAT;AASA,SAAOC,OAAP;AACH;AAEC,eAAeF,MAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nexport function useKey(key) {\r\n    // Keep track of key state\r\n    const [pressed, setPressed] = useState(false)\r\n\r\n    // Does an event match the key we're watching?\r\n    const match = event => key.toLowerCase() == event.key.toLowerCase()\r\n\r\n    // Event handlers\r\n    const onDown = event => {\r\n        if (match(event)) setPressed(true)\r\n    }\r\n\r\n    // const onUp = event => {\r\n    //     if (match(event)) setPressed(false)\r\n    // }\r\n\r\n    // Bind and unbind events\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", onDown)\r\n        //window.addEventListener(\"keyup\", onUp)\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", onDown)\r\n            //window.removeEventListener(\"keyup\", onUp)\r\n        }\r\n    }, [key])\r\n\r\n    return pressed\r\n}\r\n\r\n  export default useKey;\r\n"]},"metadata":{},"sourceType":"module"}